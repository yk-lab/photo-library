"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from logging import getLogger
from pathlib import Path

import django_stubs_ext
from corsheaders.defaults import default_headers
from django_extensions.utils import InternalIPS

from .setting_utils import env_bool, env_comma_separated_list

logger = getLogger(__name__)


# sbdchd/django-types: :doughnut: Type stubs for Django
# https://github.com/sbdchd/django-types
django_stubs_ext.monkeypatch()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
SECRET_KEY_FALLBACKS = env_comma_separated_list("SECRET_KEY_FALLBACKS")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool("DEBUG", False)

ALLOWED_HOSTS = [host for host in os.getenv("ALLOWED_HOSTS", "").split(",") if host]

SESSION_COOKIE_HTTPONLY = True

# 環境情報
ENVIRONMENT = os.getenv("ENVIRONMENT", "Local")

# HTTPS 設定
FORCE_HTTPS = env_bool("FORCE_HTTPS", ENVIRONMENT != "Local")
if FORCE_HTTPS:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"


# Application definition

INSTALLED_APPS = [
    # -- 認証系 --
    "allauth",
    "allauth.account",
    #
    # -- Django form系 --
    "crispy_forms",
    "crispy_tailwind",
    #
    # -- rest_framework --
    "corsheaders",
    "rest_framework",
    #
    # -- django その他機能拡張サードパーティ --
    "django_extensions",
    "django_boost",
    "django_utils",
    "django_filters",
    #
    # -- Model 拡張 --
    "localflavor",
    # "phonenumber_field",
    "ya_django_toolkit_jp",
    #
    # -- Template 拡張 --
    "mathfilters",
    #
    # -- Django 標準アプリ --
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.admindocs",  # 追加
]
if DEBUG:
    # DebugToolbarMiddleware の設定
    INSTALLED_APPS += [
        "debug_toolbar",
    ]

MIDDLEWARE = [
    # django-log-request-id
    # https://github.com/dabapps/django-log-request-id
    "log_request_id.middleware.RequestIDMiddleware",
    #
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    #
    # django-cors-headers
    # https://github.com/adamchainz/django-cors-headers
    "corsheaders.middleware.CorsMiddleware",
    #
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    #
    # django.contrib.admindocs
    "django.contrib.admindocs.middleware.XViewMiddleware",
    #
    # django-allauth
    # https://docs.allauth.org/en/latest/installation/quickstart.html
    "allauth.account.middleware.AccountMiddleware",
]
if DEBUG:
    # DebugToolbarMiddleware の設定
    MIDDLEWARE += [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

if DEBUG:
    # DebugToolbarMiddleware の設定
    INTERNAL_IPS = InternalIPS(
        [
            "10.0.0.0/8",
            "172.16.0.0/12",
            "192.168.0.0/16",
            "127.0.0.1",
        ]
    )


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Auth Settings
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth

AUTHENTICATION_BACKENDS = [
    # django-allauth
    # https://docs.allauth.org/en/latest/installation/quickstart.html
    "allauth.account.auth_backends.AuthenticationBackend",
]


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Django REST framework
# https://www.django-rest-framework.org/

REST_FRAMEWORK = {
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
}


# django-cors-headers
# https://github.com/adamchainz/django-cors-headers

CORS_ALLOWED_ORIGINS = env_comma_separated_list("CORS_ALLOWED_ORIGINS")
CORS_ALLOWED_ORIGIN_REGEXES = env_comma_separated_list("CORS_ALLOWED_ORIGIN_REGEXES")
CORS_ALLOW_HEADERS = [
    *default_headers,
    "baggage",
    "Sentry-Trace",
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "ja"

TIME_ZONE = "Asia/Tokyo"

NUMBER_GROUPING = 3

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# CRISPY FORMS
# https://django-crispy-forms.readthedocs.io/en/latest/install.html#template-packs

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"


# django-log-request-id
# https://github.com/dabapps/django-log-request-id

LOG_REQUEST_ID_HEADER = "HTTP_X_REQUEST_ID"
GENERATE_REQUEST_ID_IF_NOT_IN_HEADER = True
LOG_REQUESTS = True


# LOGGING
# https://docs.djangoproject.com/en/4.2/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "request_id": {"()": "log_request_id.filters.RequestIDFilter"},
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "standard": {
            "format": "%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s:%(lineno)s %(funcName)s %(message)s"  # noqa: E501
        },
        "django.server": {
            "()": "django.utils.log.ServerFormatter",
            "format": "[{server_time}] [{request_id}] {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "filters": ["request_id"],
            "class": "logging.StreamHandler",
            "formatter": "standard",
        },
        "django.server": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "django.server",
            "filters": ["request_id"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "django.server": {
            "handlers": ["django.server"],
            "level": "INFO",
            "propagate": False,
        },
        "rules": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
        "log_request_id.middleware": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG" if DEBUG else "INFO",
    },
}
